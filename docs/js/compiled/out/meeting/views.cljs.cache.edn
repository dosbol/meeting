{:rename-macros {}, :renames {}, :externs {document {getElementById {}}, Object {value {}}, goog {string {StringBuffer {prototype {append {}}}}}}, :use-macros {}, :excludes #{}, :name meeting.views, :imports nil, :requires {re-frame re-frame.core, re-frame.core re-frame.core, reagent reagent.core, reagent.core reagent.core, subs meeting.subs, meeting.subs meeting.subs, events meeting.events, meeting.events meeting.events}, :cljs.spec/speced-vars [], :uses nil, :defs {input-title {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\src\\cljs\\meeting\\views.cljs", :line 8, :column 7, :end-line 8, :end-column 18, :arglists (quote ([{:keys [props]}]))}, :name meeting.views/input-title, :variadic false, :file "src\\cljs\\meeting\\views.cljs", :end-column 18, :method-params ([p__46715]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [props]}]))}, home-panel {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\src\\cljs\\meeting\\views.cljs", :line 18, :column 7, :end-line 18, :end-column 17, :arglists (quote ([]))}, :name meeting.views/home-panel, :variadic false, :file "src\\cljs\\meeting\\views.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, meeting-panel {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\src\\cljs\\meeting\\views.cljs", :line 25, :column 7, :end-line 25, :end-column 20, :arglists (quote ([]))}, :name meeting.views/meeting-panel, :variadic false, :file "src\\cljs\\meeting\\views.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, panels {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\src\\cljs\\meeting\\views.cljs", :line 40, :column 8, :end-line 40, :end-column 14, :private true, :arglists (quote ([panel-name]))}, :private true, :name meeting.views/panels, :variadic false, :file "src\\cljs\\meeting\\views.cljs", :end-column 14, :method-params ([panel-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([panel-name]))}, show-panel {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\src\\cljs\\meeting\\views.cljs", :line 46, :column 7, :end-line 46, :end-column 17, :arglists (quote ([panel-name]))}, :name meeting.views/show-panel, :variadic false, :file "src\\cljs\\meeting\\views.cljs", :end-column 17, :method-params ([panel-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([panel-name]))}, main-panel {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\src\\cljs\\meeting\\views.cljs", :line 49, :column 7, :end-line 49, :end-column 17, :arglists (quote ([]))}, :name meeting.views/main-panel, :variadic false, :file "src\\cljs\\meeting\\views.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :cljs.spec/registry-ref [], :require-macros {reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:meeting.subs/db :home-panel :pre :button :value :type :on-click :title :div :h4 :id :meeting.subs/active-panel :meeting.events/set-hash! :meeting.events/set-active-panel :form :input :meeting.events/create-meeting! :on-change :href :a :props}, :order [:props :input :type :value :on-change :div :a :href :form :id :button :on-click :meeting.events/create-meeting! :title :meeting.events/set-active-panel :home-panel :meeting.events/set-hash! :meeting.subs/active-panel :h4 :pre :meeting.subs/db]}, :doc nil}