{:rename-macros {}, :renames {}, :externs {Number {}, Error {}}, :use-macros {}, :excludes #{}, :name re-frisk-shell.frisk, :imports nil, :requires {reagent reagent.core, reagent.core reagent.core}, :cljs.spec/speced-vars [], :uses nil, :defs {KeyValNode {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 105, :column 7, :end-line 105, :end-column 17, :arglists (quote ([{[k v] :data, :keys [path expanded-paths emit-fn swappable]}]))}, :name re-frisk-shell.frisk/KeyValNode, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 17, :method-params ([p__45056]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{[k v] :data, :keys [path expanded-paths emit-fn swappable]}]))}, Root {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 229, :column 7, :end-line 229, :end-column 11, :arglists (quote ([data id state-atom]))}, :name re-frisk-shell.frisk/Root, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 11, :method-params ([data id state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 229, :end-line 229, :max-fixed-arity 3, :fn-var true, :arglists (quote ([data id state-atom]))}, ListVecNode {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 135, :column 7, :end-line 135, :end-column 18, :arglists (quote ([{:keys [data path expanded-paths emit-fn swappable node]}]))}, :name re-frisk-shell.frisk/ListVecNode, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 18, :method-params ([p__45065]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [data path expanded-paths emit-fn swappable node]}]))}, NumberText {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 59, :column 7, :end-line 59, :end-column 17, :arglists (quote ([data]))}, :name re-frisk-shell.frisk/NumberText, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 17, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, expand-by-default {:name re-frisk-shell.frisk/expand-by-default, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 244, :column 1, :end-line 244, :end-column 23, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 244, :column 6, :end-line 244, :end-column 23}, :tag any}, ExpandButton {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 6, :column 7, :end-line 6, :end-column 19, :arglists (quote ([{:keys [expanded? path emit-fn]}]))}, :name re-frisk-shell.frisk/ExpandButton, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 19, :method-params ([p__45050]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [expanded? path emit-fn]}]))}, handler-frisk {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 255, :column 7, :end-line 255, :end-column 20, :arglists (quote ([re-frame-data]))}, :name re-frisk-shell.frisk/handler-frisk, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 20, :method-params ([re-frame-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :end-line 255, :max-fixed-arity 1, :fn-var true, :arglists (quote ([re-frame-data]))}, SetNode {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 158, :column 7, :end-line 158, :end-column 14, :arglists (quote ([{:keys [data path expanded-paths emit-fn swappable node]}]))}, :name re-frisk-shell.frisk/SetNode, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 14, :method-params ([p__45068]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [data path expanded-paths emit-fn swappable node]}]))}, main-frisk {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 246, :column 7, :end-line 246, :end-column 17, :arglists (quote ([re-frame-data checkbox-sorted-val]))}, :name re-frisk-shell.frisk/main-frisk, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 17, :method-params ([re-frame-data checkbox-sorted-val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 2, :fn-var true, :arglists (quote ([re-frame-data checkbox-sorted-val]))}, ExpandAllButton {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 27, :column 7, :end-line 27, :end-column 22, :arglists (quote ([emit-fn data]))}, :name re-frisk-shell.frisk/ExpandAllButton, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 22, :method-params ([emit-fn data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([emit-fn data]))}, StringText {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 53, :column 7, :end-line 53, :end-column 17, :arglists (quote ([data]))}, :name re-frisk-shell.frisk/StringText, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 17, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, MapNode {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 114, :column 7, :end-line 114, :end-column 14, :arglists (quote ([{:keys [data path expanded-paths emit-fn node], :as all}]))}, :name re-frisk-shell.frisk/MapNode, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 14, :method-params ([p__45062]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [data path expanded-paths emit-fn node], :as all}]))}, CollapseAllButton {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 37, :column 7, :end-line 37, :end-column 24, :arglists (quote ([emit-fn data]))}, :name re-frisk-shell.frisk/CollapseAllButton, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 24, :method-params ([emit-fn data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([emit-fn data]))}, expand-all-paths {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 191, :column 7, :end-line 191, :end-column 23, :arglists (quote ([root-value]))}, :name re-frisk-shell.frisk/expand-all-paths, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 23, :method-params ([root-value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 1, :fn-var true, :arglists (quote ([root-value]))}, NilText {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 50, :column 7, :end-line 50, :end-column 14, :arglists (quote ([]))}, :name re-frisk-shell.frisk/NilText, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 14, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, DataFrisk {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 181, :column 7, :end-line 181, :end-column 16, :arglists (quote ([{:keys [data], :as all}]))}, :name re-frisk-shell.frisk/DataFrisk, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 16, :method-params ([p__45071]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [data], :as all}]))}, event-frisk {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 260, :column 7, :end-line 260, :end-column 18, :arglists (quote ([deb-data]))}, :name re-frisk-shell.frisk/event-frisk, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 18, :method-params ([deb-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :end-line 260, :max-fixed-arity 1, :fn-var true, :arglists (quote ([deb-data]))}, KeywordText {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 56, :column 7, :end-line 56, :end-column 18, :arglists (quote ([data]))}, :name re-frisk-shell.frisk/KeywordText, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 18, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, styles {:name re-frisk-shell.frisk/styles, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 16, :column 1, :end-line 16, :end-column 12, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 16, :column 6, :end-line 16, :end-column 12}, :tag cljs.core/IMap}, conj-to-set {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 188, :column 7, :end-line 188, :end-column 18, :arglists (quote ([coll x]))}, :name re-frisk-shell.frisk/conj-to-set, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 18, :method-params ([coll x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll x]))}, Node {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 62, :column 7, :end-line 62, :end-column 11, :arglists (quote ([{:keys [data path emit-fn swappable node], :as val}]))}, :name re-frisk-shell.frisk/Node, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 11, :method-params ([p__45053]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [data path emit-fn swappable node], :as val}]))}, emit-fn-factory {:protocol-inline nil, :meta {:file "c:\\Dosbol\\clojure\\healthsamurai\\meeting\\docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :line 217, :column 7, :end-line 217, :end-column 22, :arglists (quote ([state-atom id swappable]))}, :name re-frisk-shell.frisk/emit-fn-factory, :variadic false, :file "docs\\js\\compiled\\out\\re_frisk_shell\\frisk.cljs", :end-column 22, :method-params ([state-atom id swappable]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 3, :fn-var true, :arglists (quote ([state-atom id swappable]))}}, :cljs.spec/registry-ref [], :require-macros {reagent reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:path :borderBottomRightRadius :stroke :transform :color :key :else :transition :button :shell-visible-button :numbers :expanded? :borderBottomLeftRadius :contract :borderTop :strings :default-value :width :data-frisk :cursor :type :flex :points :borderBottom :emit-fn :node :swappable :keywords :style :div :fontFamily :borderTopRightRadius :event :z-index :padding-top :padding-left :expanded-paths :borderTopLeftRadius :nil :id-handler :event-data :padding :borderRight :changed :borderLeft :svg :display :collapse-all :fontSize :input :viewBox :on-change :border :shell :backgroundColor :expand-all :expand :onClick :app-db :height :polygon :span :data}, :order [:expanded? :path :emit-fn :button :style :onClick :border :backgroundColor :width :height :contract :expand :svg :viewBox :transition :transform :polygon :points :stroke :color :shell :strings :keywords :numbers :nil :shell-visible-button :fontFamily :fontSize :z-index :expand-all :padding :borderTopLeftRadius :borderBottomLeftRadius :cursor :collapse-all :borderBottomRightRadius :borderTop :borderBottom :borderTopRightRadius :borderRight :borderLeft :span :data :swappable :node :padding-top :padding-left :input :type :default-value :on-change :changed :else :expanded-paths :div :display :flex :key :data-frisk :app-db :id-handler :event-data :event]}, :doc nil}